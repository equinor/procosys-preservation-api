trigger:
  branches:
    include:
      - master

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'equinor'
    ref: 'master'
        
# Global variables for the pipeline
variables:
 - template: templates/variables/preservation-variables.yml@templates
 - template: templates/variables/procosys-global-variables.yml@templates

 - name: 'repositoryName'
   value: 'preservation/api'

 - name: 'versionNumber'
   value: '1.000.0.'

 - name: NUGET.PLUGIN.HANDSHAKE.TIMEOUT.IN.SECONDS
   value: 40
  
 - name: NUGET.PLUGIN.REQUEST.TIMEOUT.IN.SECONDS
   value: 40

 - name: 'leaderElectorDockerImageTagName'
   value: '13'

name: '${{ variables.versionNumber }}$(Build.BuildId)-$(Date:MMddyyyy)'

stages:
# Run tests Stage
- stage: RunTests
  displayName: 'Run tests'
  variables:
    envName: 'runtests'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
    testPath: '$(Build.SourcesDirectory)/src/Equinor.ProCoSys.Preservation.sln'
  jobs:
  # Run Test
  - template: /templates/pipelines/runtest.yml@templates
    parameters:
      deploymentName: 'runtests'
      dependsOn: ''
      envGroup: '${{ variables.envGroupName }}'
      testPath: '${{ variables.testPath }}'

# Build stage. Docker build. If master, tag and push
- stage: Build
  displayName: 'Build'
  dependsOn: 'RunTests'
  variables:
    envName: 'build'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'
    dockerfilePath: '$(Build.SourcesDirectory)/src/Equinor.ProCoSys.Preservation.WebApi/Dockerfile'

  jobs:
   # Docker Build
   - template: /templates/pipelines/dockerbuild-preservation.yml@templates
     parameters:
       deploymentName: 'docker_build'
       dependsOn: ''
       condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master')) 
       env: 'pcs-${{ variables.envName }}'
       envGroup: '${{ variables.envGroupName }}'
       buildCommand: build
       versionNumber: ${{ variables.versionNumber }}
       arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)'
       dockerfilePath: '${{ variables.dockerfilePath }}'
       buildContext: '$(Build.SourcesDirectory)/src'
       repository: '${{ variables.repositoryName }}'
       dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

   # Docker Build and Push (Master Only)
   - template: /templates/pipelines/dockerbuild-preservation.yml@templates
     parameters:
       deploymentName: 'docker_build_and_push_master_only'
       dependsOn: ''
       condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
       env: 'pcs-${{ variables.envName }}'
       envGroup: '${{ variables.envGroupName }}'
       buildCommand: buildAndPush
       versionNumber: ${{ variables.versionNumber }}
       arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)'
       dockerfilePath: '${{ variables.dockerfilePath }}'
       buildContext: '$(Build.SourcesDirectory)/src'
       repository: '${{ variables.repositoryName }}'
       dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

   # Create Migration Script
   - template: /templates/pipelines/createsqlmigrate-preservation.yml@templates
     parameters:
       dependsOn: ''
       deploymentName: 'create_migration_script'
       envGroup: '${{ variables.envGroupName }}'
       serviceConnection: '${{ variables.nonProdServiceConnection }}'

# Dev deploy stage
- stage: DeployDev
  displayName: 'Deploy to dev'
  dependsOn: 'Build' 
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
  variables:
    envName: 'dev'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    
  jobs:
    - deployment: Deploy
      displayName: Migrate DB & deploy
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              # Run Migration Script (Predeploy)
              - template: templates/execute-db-migration.yml
                parameters:
                  dependsOn: ''      
                  deploymentName: 'run_migration_script'
                  envGroup: '${{ variables.envGroupName }}'
                  serviceConnection: '${{ variables.serviceConnection }}'
                  kvName: '${{ variables.commonKeyVault }}'
                  kvRgName: 'pcs-common-rg'
                  kvSecret: '${{ variables.sqlAdminUserName }}-${{ variables.envName }}'
                  serverName: '${{ variables.sqlServerName }}.database.windows.net'
                  databaseName: '${{ variables.sqlDatabaseName }}'      

              # Deploy to Radix
              - template: templates/radix-deploy.yml
                parameters:
                  imageTagNameBackend: '${{ variables.versionNumber }}$(Build.BuildId)'
                  imageTagNameLeaderElector: ${{ variables.leaderElectorDockerImageTagName }}

# Deploy stage - test
- stage: DeployTest
  displayName: 'Deploy to test'
  dependsOn: 'DeployDev'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
  variables:
    envName: 'test'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    radixPromoteFromEnv: 'dev'
    radixJobName: $[ stageDependencies.DeployDev.Deploy.outputs['Deploy.RADIXJOB.radixJobName'] ] # This variable must have been set by previous step

  jobs:
    - deployment: Deploy
      displayName: Migrate DB & promote
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              # Run Migration Script (Predeploy)
              - template: templates/execute-db-migration.yml
                parameters:
                  dependsOn: ''      
                  deploymentName: 'run_migration_script'
                  envGroup: '${{ variables.envGroupName }}'
                  serviceConnection: '${{ variables.serviceConnection }}'
                  kvName: '${{ variables.commonKeyVault }}'
                  kvRgName: 'pcs-common-rg'
                  kvSecret: '${{ variables.sqlAdminUserName }}-${{ variables.envName }}'
                  serverName: '${{ variables.sqlServerName }}.database.windows.net'
                  databaseName: '${{ variables.sqlDatabaseName }}'      
              # Promote to test
              - template: templates/radix-promote-env.yml
                parameters:
                  fromEnvironment: $(radixPromoteFromEnv)
                  toEnvironment: $(envName)
                  deploymentName: $(radixJobName)

# Deploy stage - prod
- stage: DeployProd
  displayName: 'Deploy to prod'
  dependsOn: 'DeployTest'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
  variables:
    envName: 'prod'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
    serviceConnection: '${{ variables.prodServiceConnection }}'
    radixPromoteFromEnv: 'test'
    radixJobName: $[ stageDependencies.DeployTest.Deploy.outputs['Deploy.RADIXJOB.radixJobName'] ] # This variable must have been set by previous step

  jobs:
    - deployment: Deploy
      displayName: Migrate DB & promote
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              # Run Migration Script (Predeploy)
              - template: templates/execute-db-migration.yml
                parameters:
                  dependsOn: ''      
                  deploymentName: 'run_migration_script'
                  envGroup: '${{ variables.envGroupName }}'
                  serviceConnection: '${{ variables.serviceConnection }}'
                  kvName: '${{ variables.commonKeyVault }}'
                  kvRgName: 'pcs-common-rg'
                  kvSecret: '${{ variables.sqlAdminUserName }}-${{ variables.envName }}'
                  serverName: '${{ variables.sqlServerName }}.database.windows.net'
                  databaseName: '${{ variables.sqlDatabaseName }}'      

              # Promote to prod
              - template: templates/radix-promote-env.yml
                parameters:
                  fromEnvironment: $(radixPromoteFromEnv)
                  toEnvironment: $(envName)
                  deploymentName: $(radixJobName)
